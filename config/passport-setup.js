const passport = require('passport');
const AuthentiqStrategy = require('passport-authentiq').Strategy;
if (process.env.NODE_ENV === 'development') {
  const dotenv = require('dotenv');
  dotenv.config();
}
const mongoose = require('mongoose');
const User = require('../models/user');

// creates a cookie
passport.serializeUser((user, done) => {
  // user id generated by mongo e.g. document ID not AuthentiqID
  done(null, user.id);
});

// uses a cookie
passport.deserializeUser(async (id, done) => {
  try {
    const findUser = await User.findById(id);
    done(null, findUser);

  } catch (error) {
    console.log(error);
  }
});

passport.use(new AuthentiqStrategy({
    clientID: 'client-id',
    clientSecret: process.env.AUTHENTIQ_SECRET,
    callbackURL: 'https://834.ngrok.io/auth/authentiq/callback',
    scope: ["openid", "email~rs", "phone~r", "aq:name", "aq:push"]
  }, async (iss, sub, profile, done) => {
    // https://connect2id.com/learn/openid-connect
    // iss => issuing authority
    // sub => subject e.g profile.id
    // profile => user profile information passed from Authentiq
    // -- Once done method is called it moves onto the serializeUser middleware

    try {
      // check for user
      const findUser = await User.findOne({ authentiqId: profile.id });
      if (findUser) {
        // found a user in db
        console.log('found user');
        console.log(findUser);
        return done(null, findUser);
      } else {
        // create a user
        const newUser = await new User({
          authentiqId: sub,
          firstName: profile.name.givenName,
          middleName: profile.name.middleName,
          lastName: profile.name.familyName,
          email: {
            address: profile._json.email,
            verified: profile._json.email_verified
          },
          phone: {
            number: profile._json.phone_number,
            phoneType: profile._json.phone_type,
            verified: profile._json.phone_number_verified
          }
        }).save();

        console.log('created user');
        console.log(newUser);
        return done(null, newUser);
      }

    } catch (error) {
      console.log(error);
    }

  }
));
